@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Diagnostics
<PageTitle>KNF-laatulinkit</PageTitle>

@*
@using Microsoft.JSInterop
@inject Blazored.LocalStorage.ILocalStorageService localStorage


Demonstrating Blazor app with links from .json files
@jussivirkkala

-Displaying 
2023-08-02 Changed indexes
2023-08-04 First version. Using <BlazorEnableCompression>false</BlazorEnableCompression>
2023-08-07 Assuming https:// and MarkupString
2023-08-08 Correct 9->8.
2023-08-10 Removed saving password.
2023-08-11 Stop saving username, password.
2023-08-12 Remembering last selection, no save button.
2023-08-14 Remove <em>
2023-10-02 passlink
2023-10-03 
*@

@if (links == null)
{
    <p @onclick="() => load_default()"><a href="">Loading @set...</a></p>
}
else
{
    <table class="table">
        <tbody>
            @if(true)
            {
                passlink=false;
            }
            @foreach (var link_item in links)
            {
                <tr>
                    @switch(link_item.type)
                    {
                    case 1:                        
                        <td>@((MarkupString)link_item.label)</td> // 2023-08-07 MarkupString
                        break;
                    case 2:
                        <td @onclick="() => load(link_item.link)"><a href="">@link_item.label</a></td>
                        break;
                    case 3:
                        <td @onclick="() => open(link_item.link)"><a href="">@link_item.label</a></td>
                        break;
                    case 4:
                        <td @onclick="() => open_user(link_item.link)"><a href="">@link_item.label</a></td>
                        passlink = true;
                        break;
                    case 9:
                        <tr>@link_item.label<input type="text" autocomplete="on" size="10" @bind="@path"></tr>
                        break;
                    default:
                        <td>unknown type: @link_item.type</td>
                        break;
                    }
                </tr>
            }
            @if(passlink)
            {
                <tr>username:<input type="text" autocomplete="on" size="10" @bind="@username"></tr>
                <tr>password:<input type="password" autocomplete="on" size = "10" @bind = "@password" /></tr>
                <tr>v2023-10-02</tr>
            }
            @*
            <button class="btn btn-primary" @onclick="saveSettings">Save</button>
            *@
        </tbody>
    </table>
}


@code {
    private bool passlink=false;
    private string username = "";
    private string password = "";

    public class link_item
    {
        public int? type { get; set; }
        public string? label { get; set; }
        public string? link { get; set; }
    }
    private link_item[]? links=null;

    // Load default list
    private string set;
    private string path;

    protected override async Task OnInitializedAsync()
    {
        /*
        string saved = await localStorage.GetItemAsync<String>("saved");
            if (saved!=null)
            {
            username = await localStorage.GetItemAsync<String>("username");
            password = await localStorage.GetItemAsync<String>("password");
            set = await localStorage.GetItemAsync<String>("set");
        }
        */
        // username = await GetItemAsync("username");
        // password = await GetItemAsync("password");
        set = await GetItemAsync("set");
        if (set == null) set = "main.json";
        path = await GetItemAsync("path");
        if (path == null) path = "data/";
        load(set);
    }

    // Load links
    // 2023-08-08 set->page
    private async void load(string? page)
    {
        try
        {
            this.set = page;
            var randomid = Guid.NewGuid().ToString(); // bypass cache
            var url_get = $"{path}/{page}?{randomid}"; // $"data/{page}?{randomid}"
            links= await Http.GetFromJsonAsync<link_item[]>(url_get);
            saveSettings(); // 2023-08-13
        }
        catch (HttpRequestException ex)
        {
            links = null;
        }
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    private async void load_default()
    {
        load("main.json");
    }

    private void open(string link)
    {
        JSRuntime.InvokeAsync<string>("open", link, "_blank");
    }

    // 2023-06-07 Assuming https://
    private void open_user(string link)
    {
        // https:// zero index
        link = link.Substring(8);
        link = "https://"+System.Web.HttpUtility.UrlEncode(username) + ":" + System.Web.HttpUtility.UrlEncode(password) + "@" + link;
        open(link);
    }

    private async void saveSettings()
    {
        /*
        await localStorage.SetItemAsync("username", username);
        await localStorage.SetItemAsync("password", password);
        await localStorage.SetItemAsync("set", set);
        await localStorage.SetItemAsync("saved", DateTime.Now.ToString("o"));
        */
        // await SetItemAsync("username", username);
        // await SetItemAsync("password", password);
        await SetItemAsync("set", set);
        await SetItemAsync("path", path);
    }

    private async Task SetItemAsync(string key, string value)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
    }

    private async Task<string> GetItemAsync(string key)
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
    }
}
